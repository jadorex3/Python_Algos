"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)

ЗДЕСЬ ДОЛЖНА БЫТЬ РЕАЛИЗАЦИЯ ЧЕРЕЗ РЕКУРСИЮ
"""


def recur_method(num, evens=0, odds=0):
    """Рекурсия"""

    if num == 0:
        return evens, odds
    else:
        current_num = num % 10
        num = num // 10
        if current_num % 2 == 0:
            evens += 1
            return recur_method(num, evens, odds)
        else:
            odds += 1
            return recur_method(num, evens, odds)


try:
    NUM = int(input('Введите натуральное число: '))
    if NUM <= 0:
        raise ValueError

    print(f'В числе {NUM} всего {recur_method(NUM)[0] + recur_method(NUM)[1]} цифр, '
          f'из которых {recur_method(NUM)[0]} чётных и {recur_method(NUM)[1]} нечётных')

except ValueError:
    print("Введенное значение не является натуральным числом")
